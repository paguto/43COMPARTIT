import Aresta.*;
import Vertex.*;
import Graf.*;

public abstract class Algoritmo {
	int[] Path;
	
    /*
     * Pre:  El graf es vàlid.
     * Post: trobacami retorna el flow que es pot sumar al cami que ha trobat.
     * 		 Guarda al array Path el cami que ha trobat
     */
	protected abstract int trobacami(Graf G, int[] Path);
	
    /*
     * Pre:  El graf es vàlid.
     * Post: getResidual retorna el graf residual del paràmetre implícit
     */
    public Graf getResidual(Graf G){
    	
    	Vertex sink = new Vertex();
    	sink = G.getFi();
            int flow; 
            while ((flow = trobacami(G, Path)) > 0){
        	int i = sink.getId();
        	
            while (Path[i] != -2){
            Aresta a = new Aresta();
           
           a = G.getAresta(Path[i], i);
           
           int fluxA = a.getFlux();
           
           a.setFlux(fluxA - flow);

           Aresta a2 = new Aresta();
           a2.setId_vertex_original(i);
           a2.setId_vertex_adjunt(Path[i]);
           if (G.existsAresta(a2)){
        	   int fluxA2 = a2.getFlux();
        	   a2.setFlux(flow + fluxA2);
           }
           else{
        	   G.afegirAresta(a2);
        	   a2.setFlux(flow);
           }
           i = Path[i];
            }
            }
            return G;
    }
}
