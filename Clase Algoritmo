import Aresta.*;
import Vertex.*;
import Graf.*;

public class Algoritmo {
	int[] Path;
	
	private int trobacami(Graf G, int[] Path){
		return 1;
		
	}
	
    public Graf getResidual(Graf G){
    	
    	Vertex sink = new Vertex();
    	sink = G.getFi();
            int flow; 
            while ((flow = trobacami(G, Path)) > 0){
            
        	int i = sink.getId();
        	
            while (Path[i] != -2){
            	
            Aresta a = new Aresta();
           
           a = G.getAresta(Path[i], i);
           
           int fluxA = a.getFluxe();
           
           a.setFluxe(fluxA - flow); //iria bien tener una funcion de aumentar o disminuir
           //flujo en vez de solo modificarlo
           
           Aresta a2 = new Aresta();
           a2.setVertexIni(i);
           a2.setVertexFi(Path[i]);
           if (G.existsAresta(a2)){
        	   int fluxA2 = a2.getFluxe();
        	   a2.setFluxe(flow + fluxA2);
           }
           else{
        	   G.afegirAresta(a2);
        	   a2.setFluxe(flow);
           }
           i = Path[i];
            }
            }
            return G;
    }
		


}  
